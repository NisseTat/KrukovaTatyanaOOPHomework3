//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    public static void main(String[] args) {
//        Задача 1 - Iterator
//        Создать класс Студент
//        Создать класс УчебнаяГруппа
//        Создать класс УчебнаяГруппаИтератор, заставив его реализовать интерфейс
//                Iterator
//        Реализовать его контракты (включая удаление)

//        Задача 2 - Iterable
//        Модифицировать класс УчебнаяГруппа, заставив его реализовать интерфейс
//                Iterable
//        Реализовать метод iterator() возвращающий экземпляр созданного нами
//        итератора
//        Создать класс УчебнаяГруппаСервис, добавив в него метод удаления
//        студента по ФИО
//        Создать класс Контроллер, добавив в него метод удаления студента и
//        вызывать в нем созданный метод из УчебнаяГруппаСервис

//        Задача 3 - Comparable
//        Модифицировать класс Студент, заставив его реализовать интерфейс
//                Comparable
//        Реализовать контракт compareTo () со сравнением по какому-либо
//        параметру (пример studentId)
//        Модифицировать класс УчебнаяГруппаСервис, добавив в него метод
//        сортировки списка студентов по id
//        Модифицировать класс Контроллер, добавив в него метод сортировки
//        списка студентов по id и вызывать в нем созданный метод из
//                УчебнаяГруппаСервис

//        Задача 4 - Comparator
//        Создать класс СтудентКомпаратор реализующий интерфейс Comparator
//        Реализовать контракт compare () со сравнением по какому-либо параметру
//                (пример: сочетание Имя+Фамилия)
//        Модифицировать класс УчебнаяГруппаСервис, добавив в него метод
//        сортировки списка студентов по ФИО
//        Модифицировать класс Контроллер, добавив в него метод сортировки
//        списка студентов по ФИО и вызывать в нем созданный метод из
//                УчебнаяГруппаСервис

        //ДЗ
//        Создать класс Поток содержащий в себе список УчебныхГрупп и реализующий интерфейс Iterable.
//        Создать класс StreamComparator, реализующий сравнение количества групп входящих в Поток.
//        Создать класс ПотокСервис, добавив в него метод сортировки списка потоков, используя созданный StreamComparator.
//        Модифицировать класс Контроллер, добавив в него созданный сервис.
//        Модифицировать класс Контроллер, добавив в него метод сортирующий список потоков, путем вызова созданного сервиса.

    }
}